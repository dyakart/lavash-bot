from aiogram.filters.callback_data import CallbackData
from aiogram.types import InlineKeyboardButton
from aiogram.utils.keyboard import InlineKeyboardBuilder


# —Å–æ–∑–¥–∞–µ–º —Å–≤–æ–π callback –¥–ª—è –∏–Ω–ª–∞–π–Ω–æ–≤–æ–≥–æ –º–µ–Ω—é
# –Ω–∞—á–∞–ª—å–Ω—ã–π –º–∞—Ä–∫–µ—Ä —É –≤—Å–µ—Ö - menu_
class MenuCallBack(CallbackData, prefix="menu"):
    # –ø–µ—Ä–µ—á–∏—Å–ª—è–µ–º –ø–æ–ª—è, –∫–æ—Ç–æ—Ä—ã–µ –±—É–¥—É—Ç
    level: int  # —É—Ä–æ–≤–µ–Ω—å –º–µ–Ω—é
    menu_name: str  # –Ω–∞–∑–≤–∞–Ω–∏–µ –º–µ–Ω—é
    category: int | None = None  # –∫–∞—Ç–µ–≥–æ—Ä–∏—è –º–µ–Ω—é
    page: int = 1  # —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –º–µ–Ω—é
    product_id: int | None = None  # id –ø—Ä–æ–¥—É–∫—Ç–∞


def get_user_main_btns(*, level: int, sizes: tuple[int] = (2,)):
    # —Ñ–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω–ª–∞–π–Ω –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    keyboard = InlineKeyboardBuilder()
    # –ø–µ—Ä–µ—á–∏—Å–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    btns = {
        "–¢–æ–≤–∞—Ä—ã üçï": "catalog",
        "–ö–æ—Ä–∑–∏–Ω–∞ üõí": "cart",
        "–û –Ω–∞—Å ‚ÑπÔ∏è": "about",
        "–û–ø–ª–∞—Ç–∞ üí≥": "payment",
        "–î–æ—Å—Ç–∞–≤–∫–∞ üì¶": "shipping",
    }
    # –ø–µ—Ä–µ–±–∏—Ä–∞–µ–º —Å–ª–æ–≤–∞—Ä—å
    for text, menu_name in btns.items():
        # –µ—Å–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–µ–Ω—é - catalog
        if menu_name == 'catalog':
            # —Ñ–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫—É —Å —Ä—É—Å—Å–∫–∏–º —Ç–µ–∫—Å—Ç–æ–º, –ø–µ—Ä–µ–¥–∞–µ–º —É—Ä–æ–≤–µ–Ω—å + 1
            # pack - —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç —Å—Ç—Ä–æ–∫—É –∏–∑ –ø–æ–ª—É—á–µ–Ω–Ω–æ–≥–æ callback
            keyboard.add(InlineKeyboardButton(text=text,
                                              callback_data=MenuCallBack(level=level + 1, menu_name=menu_name).pack()))
        # –µ—Å–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–µ–Ω—é - cart (–∫–æ—Ä–∑–∏–Ω–∞)
        elif menu_name == 'cart':
            # —Ñ–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫—É —Å —Ä—É—Å—Å–∫–∏–º —Ç–µ–∫—Å—Ç–æ–º, –ø–µ—Ä–µ–¥–∞–µ–º 3-–π —É—Ä–æ–≤–µ–Ω—å
            keyboard.add(InlineKeyboardButton(text=text,
                                              callback_data=MenuCallBack(level=3, menu_name=menu_name).pack()))
        else:
            # –¥–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –∏—Ö –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å
            keyboard.add(InlineKeyboardButton(text=text,
                                              callback_data=MenuCallBack(level=level, menu_name=menu_name).pack()))

    return keyboard.adjust(*sizes).as_markup()


def get_user_catalog_btns(*, level: int, categories: list, sizes: tuple[int] = (2,)):
    keyboard = InlineKeyboardBuilder()

    keyboard.add(InlineKeyboardButton(text='–ù–∞–∑–∞–¥',
                                      callback_data=MenuCallBack(level=level - 1, menu_name='main').pack()))
    keyboard.add(InlineKeyboardButton(text='–ö–æ—Ä–∑–∏–Ω–∞ üõí',
                                      callback_data=MenuCallBack(level=3, menu_name='cart').pack()))

    for c in categories:
        keyboard.add(InlineKeyboardButton(text=c.name,
                                          callback_data=MenuCallBack(level=level + 1, menu_name=c.name,
                                                                     category=c.id).pack()))

    return keyboard.adjust(*sizes).as_markup()


def get_products_btns(
        *,
        level: int,
        category: int,
        page: int,
        pagination_btns: dict,
        product_id: int,
        sizes: tuple[int] = (2, 1)
):
    keyboard = InlineKeyboardBuilder()

    keyboard.add(InlineKeyboardButton(text='–ù–∞–∑–∞–¥',
                                      callback_data=MenuCallBack(level=level - 1, menu_name='catalog').pack()))
    keyboard.add(InlineKeyboardButton(text='–ö–æ—Ä–∑–∏–Ω–∞ üõí',
                                      callback_data=MenuCallBack(level=3, menu_name='cart').pack()))
    keyboard.add(InlineKeyboardButton(text='–ö—É–ø–∏—Ç—å üíµ',
                                      callback_data=MenuCallBack(level=level, menu_name='add_to_cart',
                                                                 product_id=product_id).pack()))

    keyboard.adjust(*sizes)

    row = []
    for text, menu_name in pagination_btns.items():
        if menu_name == "next":
            row.append(InlineKeyboardButton(text=text,
                                            callback_data=MenuCallBack(
                                                level=level,
                                                menu_name=menu_name,
                                                category=category,
                                                page=page + 1).pack()))

        elif menu_name == "previous":
            row.append(InlineKeyboardButton(text=text,
                                            callback_data=MenuCallBack(
                                                level=level,
                                                menu_name=menu_name,
                                                category=category,
                                                page=page - 1).pack()))

    return keyboard.row(*row).as_markup()


def get_user_cart(
        *,
        level: int,
        page: int | None,
        pagination_btns: dict | None,
        product_id: int | None,
        sizes: tuple[int] = (3,)
):
    keyboard = InlineKeyboardBuilder()
    if page:
        keyboard.add(InlineKeyboardButton(text='–£–¥–∞–ª–∏—Ç—å',
                                          callback_data=MenuCallBack(level=level, menu_name='delete',
                                                                     product_id=product_id, page=page).pack()))
        keyboard.add(InlineKeyboardButton(text='-1',
                                          callback_data=MenuCallBack(level=level, menu_name='decrement',
                                                                     product_id=product_id, page=page).pack()))
        keyboard.add(InlineKeyboardButton(text='+1',
                                          callback_data=MenuCallBack(level=level, menu_name='increment',
                                                                     product_id=product_id, page=page).pack()))

        keyboard.adjust(*sizes)

        row = []
        for text, menu_name in pagination_btns.items():
            if menu_name == "next":
                row.append(InlineKeyboardButton(text=text,
                                                callback_data=MenuCallBack(level=level, menu_name=menu_name,
                                                                           page=page + 1).pack()))
            elif menu_name == "previous":
                row.append(InlineKeyboardButton(text=text,
                                                callback_data=MenuCallBack(level=level, menu_name=menu_name,
                                                                           page=page - 1).pack()))

        keyboard.row(*row)

        row2 = [
            InlineKeyboardButton(text='–ù–∞ –≥–ª–∞–≤–Ω—É—é üè†',
                                 callback_data=MenuCallBack(level=0, menu_name='main').pack()),
            InlineKeyboardButton(text='–ó–∞–∫–∞–∑–∞—Ç—å',
                                 callback_data=MenuCallBack(level=0, menu_name='order').pack()),
        ]
        return keyboard.row(*row2).as_markup()
    else:
        keyboard.add(
            InlineKeyboardButton(text='–ù–∞ –≥–ª–∞–≤–Ω—É—é üè†',
                                 callback_data=MenuCallBack(level=0, menu_name='main').pack()))

        return keyboard.adjust(*sizes).as_markup()


def get_callback_btns(*, btns: dict[str, str], sizes: tuple[int] = (2,)):
    keyboard = InlineKeyboardBuilder()

    for text, data in btns.items():
        keyboard.add(InlineKeyboardButton(text=text, callback_data=data))

    return keyboard.adjust(*sizes).as_markup()
